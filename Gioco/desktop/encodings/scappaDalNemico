%MODELLO INPUT
%casella(X,Y).		   		--> una generica casella percorribile eventualmente
%moneta(X,Y,Tipo).     		--> una moneta con il tipo associato ("normale"/"speciale")
%pacmanDLV(Tempo,X,Y). 		--> la posizione di pacman in un certo istante di tempo
%monetaPiuVicina(X,Y). 		--> la moneta più vicina a pacman 
%nemico(ID,Peso,X,Y).		--> un nemico con il suo Id, il peso che dipende dalla distanza da pacman e la sua posizione


%Guess sulle mosse possibili
up(T)|down(T)|right(T)|left(T):-pacmanDLV(T,X,Y),T<7.

%vincolo mossa consentita
:- up(T),pacmanDLV(T,X,Y),not casella(X-1,Y).
:- down(T),pacmanDLV(T,X,Y),not casella(X+1,Y).
:- left(T),pacmanDLV(T,X,Y),not casella(X,Y-1).
:- right(T),pacmanDLV(T,X,Y),not casella(X,Y+1).

%aggiorna posizione pacman
pacmanDLV(T+1,X-1,Y):-up(T),pacmanDLV(T,X,Y).
pacmanDLV(T+1,X+1,Y):-down(T),pacmanDLV(T,X,Y).
pacmanDLV(T+1,X,Y-1):-left(T),pacmanDLV(T,X,Y).
pacmanDLV(T+1,X,Y+1):-right(T),pacmanDLV(T,X,Y).

distanzaFinale(ID,D) :- nemico(ID,Peso,X1,Y1),pacmanDLV(7,X2,Y2),X2>=X1,Y2>=Y1,D1=X2-X1,D2=Y2-Y1,D=D1+D2.
distanzaFinale(ID,D) :- nemico(ID,Peso,X1,Y1),pacmanDLV(7,X2,Y2),X2>=X1,Y2<=Y1,D1=X2-X1,D2=Y1-Y2,D=D1+D2.
distanzaFinale(ID,D) :- nemico(ID,Peso,X1,Y1),pacmanDLV(7,X2,Y2),X2<=X1,Y2>=Y1,D1=X1-X2,D2=Y2-Y1,D=D1+D2.
distanzaFinale(ID,D) :- nemico(ID,Peso,X1,Y1),pacmanDLV(7,X2,Y2),X2<=X1,Y2<=Y1,D1=X1-X2,D2=Y1-Y2,D=D1+D2.

distanzaCorrente(T,ID,D) :- nemico(ID,Peso,X1,Y1),pacmanDLV(T,X2,Y2),X2>=X1,Y2>=Y1,D1=X2-X1,D2=Y2-Y1,D=D1+D2.
distanzaCorrente(T,ID,D) :- nemico(ID,Peso,X1,Y1),pacmanDLV(T,X2,Y2),X2>=X1,Y2<=Y1,D1=X2-X1,D2=Y1-Y2,D=D1+D2.
distanzaCorrente(T,ID,D) :- nemico(ID,Peso,X1,Y1),pacmanDLV(T,X2,Y2),X2<=X1,Y2>=Y1,D1=X1-X2,D2=Y2-Y1,D=D1+D2.
distanzaCorrente(T,ID,D) :- nemico(ID,Peso,X1,Y1),pacmanDLV(T,X2,Y2),X2<=X1,Y2<=Y1,D1=X1-X2,D2=Y1-Y2,D=D1+D2.

%vincolo per evitare di tornare due volte sulla stessa posizione
:~ pacmanDLV(T,X,Y),pacmanDLV(T1,X,Y),T<T1. [1@20,T]

%paga se va su una posizione dove c'è un nemico
:~ pacmanDLV(T,X,Y),nemico(ID,_,X,Y). [1@19,ID]

%per ogni istante paga la distanza corrente da un dato nemico ad un livello che dipende dal peso di quel nemico
:~ distanzaCorrente(T,ID,D),D<=7. [1@19-D,ID,T]

%si ha un'urgenza se ci sono più di 2 nemici intorno a pacman all'istante T
urgenza(T):-pacmanDLV(T,X,Y),#count{ID: nemico(ID,_,X1,Y1),X1>=X-3,Y1>=Y-3,X1<=X+3,Y1<=Y+3}!=0.

%cerca di prendere la moneta speciale se ha urgenza
:~urgenza(T),pacmanDLV(T+1,R,C),not moneta(R,C,speciale). [1@11,T,R,C]

%paga la distanza finale da un nemico ad un livello che dipende dal peso di quel nemico
:~distanzaFinale(ID,D),nemico(ID,Peso,_,_). [200-D@Peso,ID]

% aggiornamento delle monete raccolte
raccoltaMonetaNormale(T,X,Y):- pacmanDLV(T,X,Y),moneta(X,Y,"normale").
raccoltaMonetaNormale(T+1,X,Y):-raccoltaMonetaNormale(T,X,Y),T<7.

%paga se non raccoglie monete normali.
:~ pacmanDLV(T,X,Y), not moneta(X,Y,"normale"). [1@2,T,X,Y]
:~ pacmanDLV(T,X,Y), raccoltaMonetaNormale(T-1,X,Y). [1@2,T,X,Y]

distanzaPacmanMonetaVicina(D) :- monetaPiuVicina(X1,Y1),pacmanDLV(7,X2,Y2),X2>=X1,Y2>=Y1,D1=X2-X1,D2=Y2-Y1,D=D1+D2.
distanzaPacmanMonetaVicina(D) :- monetaPiuVicina(X1,Y1),pacmanDLV(7,X2,Y2),X2>=X1,Y2<=Y1,D1=X2-X1,D2=Y1-Y2,D=D1+D2.
distanzaPacmanMonetaVicina(D) :- monetaPiuVicina(X1,Y1),pacmanDLV(7,X2,Y2),X2<=X1,Y2>=Y1,D1=X1-X2,D2=Y2-Y1,D=D1+D2.
distanzaPacmanMonetaVicina(D) :- monetaPiuVicina(X1,Y1),pacmanDLV(7,X2,Y2),X2<=X1,Y2<=Y1,D1=X1-X2,D2=Y1-Y2,D=D1+D2.

%se non raccoglie la moneta piu vicina, minimizza la distanza
monetaPiuVicinaRaccolta :- raccoltaMonetaNormale(_,X,Y),monetaPiuVicina(X,Y).
:~ distanzaPacmanMonetaVicina(D),not monetaPiuVicinaRaccolta. [D@1]
